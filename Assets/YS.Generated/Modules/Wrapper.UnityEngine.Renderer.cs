using Renderer = UnityEngine.Renderer;
using Bounds = UnityEngine.Bounds;
using ShadowCastingMode = UnityEngine.Rendering.ShadowCastingMode;
using MotionVectorGenerationMode = UnityEngine.MotionVectorGenerationMode;
using LightProbeUsage = UnityEngine.Rendering.LightProbeUsage;
using ReflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage;
using RayTracingMode = UnityEngine.Experimental.Rendering.RayTracingMode;
using GameObject = UnityEngine.GameObject;
using Transform = UnityEngine.Transform;
using Vector4 = UnityEngine.Vector4;
using Material = UnityEngine.Material;
using MaterialPropertyBlock = UnityEngine.MaterialPropertyBlock;
using List = System.Collections.Generic.List<UnityEngine.Material>;
using List_ = System.Collections.Generic.List<UnityEngine.Rendering.ReflectionProbeBlendInfo>;

namespace YS.Generated {
    public static partial class Wrapper {
        public static TypeModule Create_UnityEngine_RendererModule(global::System.Type baseType=null) {
            var module = new TypeModule(typeof(Renderer));
            module.RegisterConstructor(result => result.SetValue( new Renderer()));
            module.RegisterPropertyGetter("bounds", (result, input1) => result.SetValue(input1.As<Renderer>().bounds));
            module.RegisterPropertySetter("bounds", (input1, input2) => input1.As<Renderer>().bounds=input2.As<Bounds>());
            module.RegisterPropertyGetter("localBounds", (result, input1) => result.SetValue(input1.As<Renderer>().localBounds));
            module.RegisterPropertySetter("localBounds", (input1, input2) => input1.As<Renderer>().localBounds=input2.As<Bounds>());
            module.RegisterPropertyGetter("enabled", (result, input1) => result.SetValue(input1.As<Renderer>().enabled));
            module.RegisterPropertySetter("enabled", (input1, input2) => input1.As<Renderer>().enabled=input2.As<bool>());
            module.RegisterPropertyGetter("isVisible", (result, input1) => result.SetValue(input1.As<Renderer>().isVisible));
            module.RegisterPropertyGetter("shadowCastingMode", (result, input1) => result.SetValue(input1.As<Renderer>().shadowCastingMode));
            module.RegisterPropertySetter("shadowCastingMode", (input1, input2) => input1.As<Renderer>().shadowCastingMode=input2.As<ShadowCastingMode>());
            module.RegisterPropertyGetter("receiveShadows", (result, input1) => result.SetValue(input1.As<Renderer>().receiveShadows));
            module.RegisterPropertySetter("receiveShadows", (input1, input2) => input1.As<Renderer>().receiveShadows=input2.As<bool>());
            module.RegisterPropertyGetter("forceRenderingOff", (result, input1) => result.SetValue(input1.As<Renderer>().forceRenderingOff));
            module.RegisterPropertySetter("forceRenderingOff", (input1, input2) => input1.As<Renderer>().forceRenderingOff=input2.As<bool>());
            module.RegisterPropertyGetter("staticShadowCaster", (result, input1) => result.SetValue(input1.As<Renderer>().staticShadowCaster));
            module.RegisterPropertySetter("staticShadowCaster", (input1, input2) => input1.As<Renderer>().staticShadowCaster=input2.As<bool>());
            module.RegisterPropertyGetter("motionVectorGenerationMode", (result, input1) => result.SetValue(input1.As<Renderer>().motionVectorGenerationMode));
            module.RegisterPropertySetter("motionVectorGenerationMode", (input1, input2) => input1.As<Renderer>().motionVectorGenerationMode=input2.As<MotionVectorGenerationMode>());
            module.RegisterPropertyGetter("lightProbeUsage", (result, input1) => result.SetValue(input1.As<Renderer>().lightProbeUsage));
            module.RegisterPropertySetter("lightProbeUsage", (input1, input2) => input1.As<Renderer>().lightProbeUsage=input2.As<LightProbeUsage>());
            module.RegisterPropertyGetter("reflectionProbeUsage", (result, input1) => result.SetValue(input1.As<Renderer>().reflectionProbeUsage));
            module.RegisterPropertySetter("reflectionProbeUsage", (input1, input2) => input1.As<Renderer>().reflectionProbeUsage=input2.As<ReflectionProbeUsage>());
            module.RegisterPropertyGetter("renderingLayerMask", (result, input1) => result.SetValue(input1.As<Renderer>().renderingLayerMask));
            module.RegisterPropertySetter("renderingLayerMask", (input1, input2) => input1.As<Renderer>().renderingLayerMask=input2.As<uint>());
            module.RegisterPropertyGetter("rendererPriority", (result, input1) => result.SetValue(input1.As<Renderer>().rendererPriority));
            module.RegisterPropertySetter("rendererPriority", (input1, input2) => input1.As<Renderer>().rendererPriority=input2.As<int>());
            module.RegisterPropertyGetter("rayTracingMode", (result, input1) => result.SetValue(input1.As<Renderer>().rayTracingMode));
            module.RegisterPropertySetter("rayTracingMode", (input1, input2) => input1.As<Renderer>().rayTracingMode=input2.As<RayTracingMode>());
            module.RegisterPropertyGetter("sortingLayerName", (result, input1) => result.SetValue(input1.As<Renderer>().sortingLayerName));
            module.RegisterPropertySetter("sortingLayerName", (input1, input2) => input1.As<Renderer>().sortingLayerName=input2.As<string>());
            module.RegisterPropertyGetter("sortingLayerID", (result, input1) => result.SetValue(input1.As<Renderer>().sortingLayerID));
            module.RegisterPropertySetter("sortingLayerID", (input1, input2) => input1.As<Renderer>().sortingLayerID=input2.As<int>());
            module.RegisterPropertyGetter("sortingOrder", (result, input1) => result.SetValue(input1.As<Renderer>().sortingOrder));
            module.RegisterPropertySetter("sortingOrder", (input1, input2) => input1.As<Renderer>().sortingOrder=input2.As<int>());
            module.RegisterPropertyGetter("allowOcclusionWhenDynamic", (result, input1) => result.SetValue(input1.As<Renderer>().allowOcclusionWhenDynamic));
            module.RegisterPropertySetter("allowOcclusionWhenDynamic", (input1, input2) => input1.As<Renderer>().allowOcclusionWhenDynamic=input2.As<bool>());
            module.RegisterPropertyGetter("isPartOfStaticBatch", (result, input1) => result.SetValue(input1.As<Renderer>().isPartOfStaticBatch));
            module.RegisterPropertyGetter("worldToLocalMatrix", (result, input1) => result.SetValue(input1.As<Renderer>().worldToLocalMatrix));
            module.RegisterPropertyGetter("localToWorldMatrix", (result, input1) => result.SetValue(input1.As<Renderer>().localToWorldMatrix));
            module.RegisterPropertyGetter("lightProbeProxyVolumeOverride", (result, input1) => result.SetValue(input1.As<Renderer>().lightProbeProxyVolumeOverride));
            module.RegisterPropertySetter("lightProbeProxyVolumeOverride", (input1, input2) => input1.As<Renderer>().lightProbeProxyVolumeOverride=input2.As<GameObject>());
            module.RegisterPropertyGetter("probeAnchor", (result, input1) => result.SetValue(input1.As<Renderer>().probeAnchor));
            module.RegisterPropertySetter("probeAnchor", (input1, input2) => input1.As<Renderer>().probeAnchor=input2.As<Transform>());
            module.RegisterPropertyGetter("lightmapIndex", (result, input1) => result.SetValue(input1.As<Renderer>().lightmapIndex));
            module.RegisterPropertySetter("lightmapIndex", (input1, input2) => input1.As<Renderer>().lightmapIndex=input2.As<int>());
            module.RegisterPropertyGetter("realtimeLightmapIndex", (result, input1) => result.SetValue(input1.As<Renderer>().realtimeLightmapIndex));
            module.RegisterPropertySetter("realtimeLightmapIndex", (input1, input2) => input1.As<Renderer>().realtimeLightmapIndex=input2.As<int>());
            module.RegisterPropertyGetter("lightmapScaleOffset", (result, input1) => result.SetValue(input1.As<Renderer>().lightmapScaleOffset));
            module.RegisterPropertySetter("lightmapScaleOffset", (input1, input2) => input1.As<Renderer>().lightmapScaleOffset=input2.As<Vector4>());
            module.RegisterPropertyGetter("realtimeLightmapScaleOffset", (result, input1) => result.SetValue(input1.As<Renderer>().realtimeLightmapScaleOffset));
            module.RegisterPropertySetter("realtimeLightmapScaleOffset", (input1, input2) => input1.As<Renderer>().realtimeLightmapScaleOffset=input2.As<Vector4>());
            module.RegisterPropertyGetter("materials", (result, input1) => result.SetValue(input1.As<Renderer>().materials));
            module.RegisterPropertySetter("materials", (input1, input2) => input1.As<Renderer>().materials=input2.As<Material[]>());
            module.RegisterPropertyGetter("material", (result, input1) => result.SetValue(input1.As<Renderer>().material));
            module.RegisterPropertySetter("material", (input1, input2) => input1.As<Renderer>().material=input2.As<Material>());
            module.RegisterPropertyGetter("sharedMaterial", (result, input1) => result.SetValue(input1.As<Renderer>().sharedMaterial));
            module.RegisterPropertySetter("sharedMaterial", (input1, input2) => input1.As<Renderer>().sharedMaterial=input2.As<Material>());
            module.RegisterPropertyGetter("sharedMaterials", (result, input1) => result.SetValue(input1.As<Renderer>().sharedMaterials));
            module.RegisterPropertySetter("sharedMaterials", (input1, input2) => input1.As<Renderer>().sharedMaterials=input2.As<Material[]>());
            module.RegisterMethod("ResetBounds", input1 => input1.As<Renderer>().ResetBounds());
            module.RegisterMethod("ResetLocalBounds", input1 => input1.As<Renderer>().ResetLocalBounds());
            module.RegisterMethod("HasPropertyBlock", (result, input1) => result.SetValue(input1.As<Renderer>().HasPropertyBlock()));
            module.RegisterMethod("SetPropertyBlock", Types(typeof(MaterialPropertyBlock)),(input1, input2) => input1.As<Renderer>().SetPropertyBlock(input2.As<MaterialPropertyBlock>()));
            module.RegisterMethod("SetPropertyBlock", Types(typeof(MaterialPropertyBlock),typeof(int)),(input1, input2, input3)  =>  input1.As<Renderer>().SetPropertyBlock(input2.As<MaterialPropertyBlock>(),input3.As<int>()));
            module.RegisterMethod("GetPropertyBlock", Types(typeof(MaterialPropertyBlock)),(input1, input2) => input1.As<Renderer>().GetPropertyBlock(input2.As<MaterialPropertyBlock>()));
            module.RegisterMethod("GetPropertyBlock", Types(typeof(MaterialPropertyBlock),typeof(int)),(input1, input2, input3)  =>  input1.As<Renderer>().GetPropertyBlock(input2.As<MaterialPropertyBlock>(),input3.As<int>()));
            module.RegisterMethod("GetMaterials", (input1, input2) => input1.As<Renderer>().GetMaterials(input2.As<List>()));
            module.RegisterMethod("GetSharedMaterials", (input1, input2) => input1.As<Renderer>().GetSharedMaterials(input2.As<List>()));
            module.RegisterMethod("GetClosestReflectionProbes", (input1, input2) => input1.As<Renderer>().GetClosestReflectionProbes(input2.As<List_>()));
            module.ClearTempMembers();
            if (baseType != null) module.BaseModule = baseType.GetModule();
            return module;
        }
    }
}